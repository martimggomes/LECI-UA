	.data
str: 	.asciiz "ITED - orievA ed edadisrevinU"
	.text
	.globl main
	

# Mapa de registos:
# str: $a0 -> $s0
# p1: $s1
# p2: $s2

strrev:
	addiu $sp,$sp,-16
	sw $ra,0($sp)
	sw $s0,4($sp)
	sw $s1,8($sp)
	sw $s2,12($sp)
	
	move $s0,$a0			# $s0 = str
	move $s1,$a0			# $s1 = p1
	move $s2,$a0			# $s2 = p2
	
while1:	
	lb $t0,0($s2)			# $t0 = *p2
	beq $t0,'\0',endw1		# while(*p2 != '\0') 
	addiu $s2,$s2,1			# p2++
	j while1
	
endw1:	
	addiu $s2,$s2,-1		# p2--
	
while2:	
	bge $s1,$s2,endw2		# while( p1 < p2 )
	
	move $a0,$s1
	move $a1,$s2
	
	jal exchange			# exchange(p1, p2)
	
	addiu $s1,$s1,1			# p1++
	addiu $s2,$s2,-1		# p2--
	
	j while2

endw2:
	move $v0,$s0			# return str
	
	lw $ra,0($sp)
	lw $s0,4($sp)
	lw $s1,8($sp)
	lw $s2,12($sp)
	addiu $sp,$sp,16
	jr $ra
	
	
# Mapa de registos:
# c1: $a0
# c2: $a1

exchange:
	addiu $sp, $sp, -8           	# Reserva espaço na stack
    	sw $ra, 0($sp)               	# Guarda o endereço de retorno
    	sw $t0, 4($sp)               	# Salva valor temporário de $t0

    	lb $t0, 0($a0)              	# $t0 = *c1
    	lb $t1, 0($a1)               	# $t1 = *c2
   	sb $t1, 0($a0)               	# *c1 = *c2
    	sb $t0, 0($a1)               	# *c2 = *c1

    	lw $t0, 4($sp)               	# Restaura $t0
    	lw $ra, 0($sp)               	# Restaura $ra
    	addiu $sp, $sp, 8            	# Libera espaço na stack
    	jr $ra                       	# Retorna da função
    	
main:
	la $a0,str		
	
	jal strrev			# strrev(str)
	
	move $a0,$v0
	li $v0,4
	syscall				# print_string( strrev(str) )
	
	li $v0,0
	jr $ra
