	.data
lista:	.word 8, -4, 3, 5, 124, -15, 87, 9, 27, 15   
str: 	.asciiz "\nConteudo do array: \n"       
semi:	.asciiz "; "                             
	
	.text
	.globl main                                
	
# MAPA REGISTOS
# $t0:	p             		  # Usado como ponteiro 'p' para percorrer o array
# $t1:	lista + size  		  # Armazena o endereço final do array (lista + tamanho)
# $t2: 	*p            		  # Usado para armazenar o valor do conteúdo apontado por 'p'

main:			          # void main (void) {
	li 	$v0, 4		  # Carrega o código de syscall 4 (print string) em $v0
	la	$a0, str	  # Carrega o endereço da string 'str' em $a0
	syscall                       
	
	la	$t0, lista	  # Carrega o endereço de 'lista' em $t0 (inicializa p = lista)
	addiu	$t1, $t0, 40	  # Calcula o endereço final do array (lista + tamanho) e armazena em $t1
	
for:			          # Início do loop (while)
	bge	$t0, $t1, endf	  # Verifica se $t0 (p) é maior ou igual a $t1 (lista + tamanho); se sim, sai do loop
	
	lw	$t2, 0($t0)	  # Carrega o valor apontado por $t0 (conteúdo de *p) em $t2
	
	li	$v0, 1		  # Carrega o código de syscall 1 (print integer) em $v0
	move 	$a0, $t2 	  # Move o valor de $t2 para $a0 (prepara o valor para impressão)
	syscall	                       
	
	li 	$v0, 4		  # Carrega o código de syscall 4 (print string) em $v0
	la	$a0, semi	  # Carrega o endereço da string 'semi' em $a0
	syscall	                 # Chama a syscall para printar a string "; "
	
	addiu	$t0, $t0, 4	 # Incrementa o ponteiro $t0 (p++) para apontar para o próximo elemento do array
	j for			 # Salta para o início do loop (continua o while)
	
endf:			                         
	jr 	$ra		 # Retorna para o endereço de retorno (fim da função main)

