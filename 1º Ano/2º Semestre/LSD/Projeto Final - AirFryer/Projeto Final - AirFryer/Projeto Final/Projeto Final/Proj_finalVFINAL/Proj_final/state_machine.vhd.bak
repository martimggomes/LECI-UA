library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity state_machine is
    port (
        clk        : in std_logic;
        reset      : in std_logic;
        run        : in std_logic;
        open_oven  : in std_logic;
        program    : in std_logic_vector(2 downto 0);
        temp       : in integer range 0 to 250;
        time       : in integer range 0 to 60;
        status     : out std_logic_vector(2 downto 0);
        led_food_in: out std_logic;
        led_half   : out std_logic_vector(3 downto 0)
    );
end entity;

architecture behavioral of state_machine is
    type state_type is (IDLE, PREHEAT, COOK, FINISH, COOL);
    signal state, next_state: state_type;
    signal time_counter: integer range 0 to 60 := 0;
    signal half_time: boolean := false;
begin
    process(clk, reset)
    begin
        if reset = '1' then
            state <= IDLE;
        elsif rising_edge(clk) then
            state <= next_state;
        end if;
    end process;

    process(state, run, open_oven, time, time_counter, half_time)
    begin
        next_state <= state;
        case state is
            when IDLE =>
                if run = '1' then
                    next_state <= PREHEAT;
                end if;
            when PREHEAT =>
                if time_counter = time then
                    next_state <= COOK;
                end if;
            when COOK =>
                if time_counter = (time / 2) then
                    half_time <= true;
                end if;
                if time_counter = time then
                    next_state <= FINISH;
                end if;
            when FINISH =>
                if open_oven = '1' then
                    next_state <= COOL;
                end if;
            when COOL =>
                if temp <= 20 then
                    next_state <= IDLE;
                end if;
        end case;
    end process;

    process(clk, reset)
    begin
        if reset = '1' then
            time_counter <= 0;
        elsif rising_edge(clk) then
            if state = PREHEAT or state = COOK then
                if time_counter < time then
                    time_counter <= time_counter + 1;
                end if;
            else
                time_counter <= 0;
            end if;
        end if;
    end process;

    led_food_in <= '1' when state = PREHEAT and time_counter = time else '0';
    led_half <= "1111" when half_time = true else "0000";
    status <= "000" when state = IDLE else
              "001" when state = PREHEAT else
              "010" when state = COOK else
              "011" when state = FINISH else
              "100" when state = COOL;
end architecture;
